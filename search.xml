<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[python的导入命令]]></title>
    <url>%2F2019%2F08%2F30%2Fpython%E7%9A%84%E5%AF%BC%E5%85%A5%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[为了代码不臃肿，从软件包取出特性，通过输入参数来实现命令。 先写一个小例子， from sys import argv 就是从sys中取出argv这个特性 这个应该是保存出入中一一对应的参数 from os.path import exists 这是从os.path中取出exists这个特性 这个是将文件名作为参数，来验证该文件是否存在存在返回（True）不存在返回（False）]]></content>
  </entry>
  <entry>
    <title><![CDATA[命令行]]></title>
    <url>%2F2019%2F08%2F30%2F%E5%91%BD%E4%BB%A4%E8%A1%8C%2F</url>
    <content type="text"><![CDATA[命令行在什么地方都很有用，随时记录一下 我在大一曾经集训过使用命令行但效果不是很好，这次我看见什么就记录下来什么。 将为文件转到其他盘 d: 转到文件夹 cd /文件夹名字/ 创建并写入新文件 echo（如echo “hello” &gt; test.txt）在这里如果该文件名字存在，那么清空内容写入东西 把文件内容投屏 cat.txt]]></content>
  </entry>
  <entry>
    <title><![CDATA[这件事情我不做不行啊]]></title>
    <url>%2F2019%2F08%2F27%2F%E8%BF%99%E4%BB%B6%E4%BA%8B%E6%83%85%E6%88%91%E4%B8%8D%E5%81%9A%E4%B8%8D%E8%A1%8C%E5%95%8A%2F</url>
    <content type="text"><![CDATA[恭喜你呀你要记住这个人1828962817今后你在大学三年的所有事情不只为你做，你要做给他看，、说话谁都会，关键是能不能真正的做出来，真正的有成绩， 之后不会再进行更新了。直到大学毕业的那天。 如果以后有任何的理由倦怠，或者需要什么理由。 要记住，这就是理由。 一定要做出成绩]]></content>
  </entry>
  <entry>
    <title><![CDATA[python的基础学习]]></title>
    <url>%2F2019%2F08%2F17%2Fpython%E7%9A%84%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[这是一个终止，又是一个开始 基本用法我决定之后都直接用powershell加上notepad++来实现python 第一个程序先写hellow world 我们命名为ex1.py 如何改到d盘有一个小问题，我们改盘直接d：就可以了之后键入 python ex1.py就可以看到运行了 关于错误要学会看懂错误，以后错误都会归入到这个最初的项目里 最初我写了一个语法错误。 系统会提醒你 1.首先会把行号写出2.会在错的地方下面画一个小三角3.告诉你什么错误(Syntaxerror)语法错误 indexError数据越组，可能是数据过多，可能是是数据组不够。 注释放一个#就可以了 如果要多行注释就每一行放一个井号 数字计算+-*/ 这便是加减乘除 %取余 关于大于小于，会直接返回True False 变量（VARIABLE）python中可以直接用来赋值不用管类型； x = 1要这样写，因为我们可以看的更轻松一点 格式化字符串可以把字符串放到一句话中，但是要用 pd=36 print（f“hellow {pd}”）这个就可以直接把变量放到语句中。 如果出现这种情况， a = &apos;qwe&apos; b = &apos;rty&apos; print(a+b)出现的结果应该是qwerty 关于打印 \n这是随时变行，还有连续三个”””zheshiyijvhua””” 这就可以直接换三行 \这是一个转义字符 /叫做斜杠，，，/叫做反斜杠 转义字符串 字符串连接 a + b‘HelloPython’ 重复输出字符串 a * 2‘HelloHello’[] 通过索引获取字符串中字符a[1]‘e’[ : ] 截取字符串中的一部分a[1:4]‘ell’//就是第一个字符和第四个字符中间的内容in 成员运算符 - 如果字符串中包含给定的字符返回 True“H” in aTruenot in 成员运算符 - 如果字符串中不包含给定的字符返回 True“M” not in aTruer/R 原始字符串 - 原始字符串：所有的字符串都是直接按照字面的意思来使用，没有转义特殊或不能打印的字符。 原始字符串除在字符串的第一个引号前加上字母”r”（可以大小写）以外，与普通字符串有着几乎完全相同的语法。print r’\n’\nprint R’\n’\n**** py的输入input输出测试 print默认是打印一行，结尾加换行。end=’ ‘意思是末尾不换行，加空格 这里有一个忽略的重点,input会直接把输入当做脚本来运行 所以类似的a,b,c,d=input()要输入”1,2,3,4”而不是1，2，3，4 input（）就是录入一个字符串。注意只能录入一个。 input还有一个用法就是 age = input (&quot;How old are you?&quot;) print(f&quot;so,you old is {age}&quot;)这是input的括号中就可以直接写一句提示的话 pydoc有一行代码 PS D:\py&gt; python -m pydoc ex1 hello worldHelp on module ex1: NAME ex1 FILE d:\py\ex1.py 直接会显示其中的内容，名字，和所在目录 pydoc是python自带的一个文档生成工具，使用pydoc可以很方便的查看类和方法结构 类似还有file和os这种对于文件的操作命令。 在input后，打上python -m pydoc input 出现这个代码 Help on built-in function input in module builtins:input(prompt=None, /) Read a string from standard input. The trailing newline is stripped. The prompt string, if given, is printed to standard output without a trailing newline before reading input. If the user hits EOF (*nix: Ctrl-D, Windows: Ctrl-Z+Return), raise EOFError. On *nix systems, readline is used if available.有关内置模块的内置函数输入的帮助： 输入（提示=无，/） 从标准输入中读取字符串。 删除尾随换行符。 如果给出，则提示字符串将打印到标准输出而不显示 在读取输入之前追踪换行符。 如果用户点击EOF（* nix：Ctrl-D，Windows：Ctrl-Z + Return），则引发EOFError。 在* nix系统上，如果可用，则使用readline。这可能是对于一条语法的解释。 参数，解包和变量脚本（script），就是你编写的py程序 这里要说一下 import这个就相当是引用库。相当与c语言中的#include 根据我的推断，py中的库应该是提前封装的，也可以叫做把sys模块引用进来。argv这叫做参数变量 sys.argv 就是一个从程序外部获取参数的桥梁 sys.argv[0]表示当前module的名字 from sys import argv.这句话的意思是sys是一个软件包，这句话的意思是从sys这个软件包中取出argv这个特性 这个保存着运行python脚本时，传递给脚本的参数。 from sys import argv//这个import把python的功能导入到程序中，可以理解为py在询问你你要什么功能 /# read the WYSS section for how to run this script, first, second, third=argv//这一句可以看出应该是argv[0]到4。这个过程叫做解包，自动把数值分为四份在这里script看起来好像是必备第一个就是脚本，也就是你py文件的名称 print(&quot;the script is called:&quot;,script) print(&quot;Your first variable is:&quot;,first) print(&quot;you second variable is:&quot;,second) print(&quot;you third variable is:&quot;,third)当键入python ex13.py first 2nd 3rd时 会出现 the script is called: ex13.pyYour first variable is: firstyou second variable is: 2ndyou third variable is: 3rd 从这里就可以看出argv是吸收了你键入的东西。argv 和 input() 之间的区别是什么？ 区别取决于用户在哪被要求输入，如果是在命令行，就用 argv。如果你想让它们在程序已经运行的情况下用键盘输入，那就用 input() 。就是argv要一开始运行的时候就要输入。而input 而input可以设置封装提示符 from sys import argv script,user_name=argv prompt=&apos;&gt;&gt;&gt;&apos; print(f&quot;Hi {user_name},I`m the {script}script&quot;) print(&quot;I`d like to ask you a few questions.&quot;) print(f&quot;Do you like your {user_name}?&quot;) likes = input(prompt) print(f&quot;Where do you live {user_name}?&quot;) lives = input(prompt) print(&quot;What kind of computer do you have?&quot;) computer = input(prompt) print(f&quot;&quot;&quot; Alright,so you said {likes} about like me. You live in {lives}. Not sure where that is. And you have a {computer} computer.Nice. &quot;&quot;&quot;) 像这样就会在问题的时候出现 PS D:\py&gt; python ex14.py zhangyifangHi zhangyifang,Im the ex14.pyscript Id like to ask you a few questions.Do you like your zhangyifang? YesWhere do you live zhangyifang?taikangWhat kind of computer do you have?legion Alright,so you said Yes about like me.You live in taikang. Not sure where that is.And you have a legion computer.Nice. PS D:\py&gt; python ex14.py zhangyifangHi zhangyifang,Im the ex14.pyscript Id like to ask you a few questions.Do you like your zhangyifang? yesWhere do you live zhangyifang?taikangWhat kind of computer do you have?mac Alright,so you said yes about like me.You live in taikang. Not sure where that is.And you have a mac computer.Nice. 如果要改的话，直接改pr那个就可以全改。 py与文件文件的读取from sys import argv // script,filename = argv txt = open(filename) print(f&quot;Here&apos;s your file {filename}:&quot;) print(txt.read()) print(&quot;Type the filename again:&quot;) file_again = input(&quot;&gt; &quot;) txt_again = open(file_again) print(txt_again.read())这是我们可以看作如何在powershell中直接读取文件。 我们的运行结果为PS D:\py&gt; python ex15.py ex15_sample.txtHere’s your file ex15_sample.txt:This is stuff I typed into a file.It is really cool stuff.Type the filename again: ex15_sample.txtThis is stuff I typed into a file.It is really cool stuff. 上述分割线可以看作两种读取文件的方式 txt = open(filename)可以理解为，直接解码打开一个txt文本。而下一行的print(txt.read())直接的把文件的内容打到显示屏上。 这里有一个问题，txt并不是固定的可以换成任何的东西 注 这里文件名必须当作参数录入进去，直接写不生效。 文件的操作close - 关闭文件，就像编辑器中的 “文件-&gt;另存为”一样。 如果不写就不会保存 read - 读取文件内容。你可以把读取结果赋给一个变量。 readline - 只读取文本文件的一行内容。 truncate - 清空文件。清空的时候要当心。 write(‘stuff’) - 给文件写入一些“东西”。 向题头文件中写入‘stuff’ seek(0) - 把读/写的位置移到文件最开头 from sys import argv script,filename = argv print(f&quot;we are going to erase {filename}.&quot;) print(&quot;If you don&apos;t want that,hit CTRL-C (^C)&quot;) print(&quot;If you want that,hit RETURN.&quot;) input(&quot;?&quot;) print (&quot;Opening the file...&quot;) target = open(filename, &apos;w&apos;) //这里以写入的方式打开了一个文件。（在w的地方，r代表只读，a代表追加）//注意这里的w要用单引号连接起来。 print (&quot;Truncating the file. Goodbye!&quot;) target.truncate()//这个单词是删除的意思（清空文件） print(&quot;Now I&apos;m going to ask you for three lines.&quot;) line1 = input(&quot;line 1: &quot;) line2 = input(&quot;line 2: &quot;) line3 = input(&quot;line 3: &quot;) print(&quot;I&apos;m going to write these to the file.&quot;) target.write(line1) target.write(&quot;\n&quot;) target.write(line2) target.write(&quot;\n&quot;) target.write(line3) target.write(&quot;\n&quot;) print(&quot;And finally，we close it.&quot;) target.close()这是关于文件的一些操作，最后不要忘了close。要不然不会保存。注意，如果只以open（filename）,那就是以只读的方式打开。 我们当然也可以以只读形式打开之后在进行赋值 函数接下来有一个大内容，函数 现在只能用到一些简单的用处， 给代码段命名 接收参数，就像接收argv一样 利用上面的1和2，可以创建迷你脚本或者小命令 我们可以用def来创建函数 现在 先写一个小程序（在这里要更新一下，py中的注释要用#） 这里额外说一下，：在py中用在函数或者if for while末尾 这里的代码就像脚本里的argvdef print_two(*args): arg1,arg2 = args print(f”arg1: {arg1},arg2: {arg2}”) 表达的另一种方式def print_two_again(arg1,arg2): print(f”arg1: {arg1},arg2:(arg2)”) 这里是只取用一个值def print_one(arg1): print(f”arg1: {arg1}”) 这里不取得值def print_none(): print(“I got nothin’.”) print_two(&quot;zed&quot;,&quot;shaw&quot;) print_two_again(&quot;zed&quot;,&quot;shaw&quot;) print_one(&quot;First!&quot;) print_none()这是以后一直都要注意的问题 上面这个代码是有问题的所有的调用函数由于没有控制缩进，都包含到最后一个函数中，这样子代码就会没有相应，现在来说一下代码的含义吧 def 这个命令就是创建一个函数注意在def的末尾要加冒号 def后面跟的就是函数名（不可以数字开头，剩下都可以）至于*args这是个和argv相似的函数，不过他要用在函数中，并且没有括号不可以。 要么就像第二种函数中的那样，直接把变量名写到函数中，直接进行赋值 注意最后一个，可以直接打印一句话。 这里还有一个重点 函数里的数值和脚本里的数值没有关系，可以多次进行赋值函数与文件的关系from sys import argv script, input_file = argv def print_all(f): print(f.read())/#在这里注意一下，这里是让嗨，f文件，执行你的read命令，无需任何参数。而把这里的read改成write会报错（Traceback (most recent call last): File “ex20.py”, line 18, in print_all(current_file) File “ex20.py”, line 6, in print_all print(f.write())TypeError: write() takes exactly one argument (0 given当然这里又出了一个问题，我的文件被覆盖了在这里查了东西 f = open(‘a.txt’, ‘r’)f.read(5)‘hello’read( )是读文件的方法，括号内填入要读取的字符数，这里填写的字符数是5，如果填写的是1那么输出的就应该是‘h’。 打开文件文件读取还有一些常用到的技巧方法，像下边这两种：1、read( )：表示读取全部内容） def rewind(f): f.seek(0)# 这是把写入的东西回到头 def print_a_line(line_count,f): print(line_count,f.readline()) current_file = open(input_file)# 这里是脚本的开始，先创造了“当前的文件” print (&quot;First let&apos;s print the whole file:\n&quot;) print_all(current_file)#把这个文件用只读形式打开 print(&quot;Now let&apos;s rewind, kind of like a tape.&quot;) rewind (current_file) print(&quot;let&apos;s print three line:&quot;) current_line = 1 print_a_line(current_line,current_file) current_line = current_line + 1 print_a_line(current_line,current_file) current_line = current_line + 1 print_a_line(current_line,current_file)我这个test.txt中是有内容的（在这里报一个错，我原本文件中由于渲染问题有两个未知字符导致报错UnicodeDecodeError: ‘gbk’ codec can’t decode byte 0xff in position 0: illegal multibyte sequence。后来把那两个字符上删除就好了） 这是运行结果PS D:\py&gt; python ex20.py test.txtFirst let’s print the whole file: This is a beautiful girlShe make me crasyblue eyes Now let’s rewind, kind of like a tape.let’s print three line:1 This is a beautiful girl 2 She make me crasy 3 blue eyes 重点强调4.1.mode：文件打开的模式。有如下几种模式‘r’： 以只读模式打开（缺省模式）（必须保证文件存在）‘w’：以只写模式打开。若文件存在，则会自动清空文件，然后重新创建；若文件不存在，则新建文件。使用这个模式必须要保证文件所在目录存在，文件可以不存在。该模式下不能使用read()方法‘a’：以追加模式打开。若文件存在，则会追加到文件的末尾；若文件不存在，则新建文件。该模式不能使用read()方法。 下面四个模式要和上面的模式组合使用‘b’：以二进制模式打开‘t’： 以文本模式打开（缺省模式）‘+’：以读写模式打开‘U’：以通用换行符模式打开 常见的mode组合‘r’或’rt’： 默认模式，文本读模式‘w’或’wt’： 以文本写模式打开（打开前文件会被清空）‘rb’： 以二进制读模式打开‘ab’： 以二进制追加模式打开‘wb’： 以二进制写模式打开（打开前文件会被清空）‘r+’： 以文本读写模式打开，可以写到文件任何位置；默认写的指针开始指在文件开头, 因此会覆写文件‘w+’： 以文本读写模式打开（打开前文件会被清空）。可以使用read()‘a+’： 以文本读写模式打开（写只能写在文件末尾）。可以使用read()‘rb+’： 以二进制读写模式打开‘wb+’： 以二进制读写模式打开（打开前文件会被清空）‘ab+’： 以二进制读写模式打开 如果用“w”的形式打开文件，如果文件存在的话，文件会被清空。 在代码中的f代表的是，文件 readline 逐行读取\n为止 函数还可以进行简单的计算和返回参数 可以用return 例如 def add(a,b): print(f”ADDING {a}+{b}”) return a+b age = add(30,5) 这就可以返回数值还会显示 ADDING 30 + 5 对于字符串，字符节，字符编码，这部分我可能以后再说 在这里要注意一下，py的注释是写在代码的下方的 在这里普及一下英语知识formule(式),format(公式)，jars（罐子），bean（豆子），crate（箱） 喜提，这里又出现了def后面不加tab导致参数无法实现的问题。 pirnt(&quot;Let&apos;s practice everything.&quot;) print(&apos;You\&apos;need to know \&apos;bout escapes with \\ thats do:&apos; ) print(&apos;\n newlines and \t tabs.&apos;) poem = &quot;&quot;&quot; \tThe lovely world with logic so firmly planted cannot discern \n the needs of love nor comprehend passion from intuition and requires an explanation \n\t\twhere there is none. &quot;&quot;&quot; print(&quot;-------------------&quot;) print(poem) print(&quot;-------------------&quot;) five = 10-2+3-6 print(f&quot;this should be five:{five}&quot;) def secret_formula(started): jelly_beans = started * 500 jars = jelly_beans / 1000 crates = jars/100 return jelly_beans,jars,crates start_point = 10000 beans,jars,crates = secret_formula(start_point) print(&quot;With a starting point of:{}&quot;.format(start_point)) print(f&quot;We&apos;d have {} beans, {} jars,and {} crates.&quot;.format (*formule)) 这是响应结果 PS D:\py&gt; python ex24.pyLet’s practice everything.You’need to know ‘bout escapes with \ thats do: newlines and tabs.The lovely worldwith logic so firmly plantedcannot discern the needs of lovenor comprehend passion from intuitionand requires an explanation where there is none. this should be five:5With a starting point of:10000We’d have 5000000 beans, 5000.0 jars,and 50.0 crates.We can also do that this way:We’d have 500000.0 beans, 500.0 jars, and 5.0 crates.PS D:\py&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[blog的维护]]></title>
    <url>%2F2019%2F08%2F17%2Fblog%E7%9A%84%E7%BB%B4%E6%8A%A4%2F</url>
    <content type="text"><![CDATA[我blog的笑容由我来守护 19.8.16出现的问题就在昨天我差点失去了我的blog 我的npm打不开,启动npm就显示 npm: command not found所有的hexo命令都是回应 /c/Users/你电脑的用户名/AppData/Roaming/npm/hexo: line 12: node: command not found在网上搜索了类似的问题都是说类似是用户路径上找不到东西,要通过添加环境变量来解决 对,就是环境变量出现了问题 在网上高搜索结果中有向用户路径中添加一个类似NODE_PASH的东西 在路径下录入C:\Users\儿子\nodejs\node_modules 注意 加这个是没用的 ** 真正的解决方法是打开PASH,编辑新建一个.添加 C:\Users\儿子\AppData\Roaming\npm\node_modules 注意是找到node_module这个文件夹的位置.可以直接检索 ** 至于在网上都是添加 C:\Users\儿子\AppData\Roaming\npm\node_modules\hexo\bin这个路径到pash中,我看最高搜索量几个答案都是这样做,也正是因为他们我差点就要重搭blog了.多谢这个兄弟的答案http://https://orzno.com/2018/11/29/Hexo%E5%8D%9A%E5%AE%A2command-not-found%E6%8A%A5%E9%94%99%E7%9A%84%E4%B8%80%E7%A7%8D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/ 如果一段时间不写blog可能路径就会被自动删除,所以要注意.blog的搭建既然在火车上也没有什么好做的，那么就讲一下blog的搭建 先说一下这些都是凭借记忆来进行，并且我不会插入任何一张图片。 我们是由git和hexo框架构建的blog 首先先进行软件的下载，首先下载git bush（不知道为什么git bush并不能在我电脑上运行，我电脑上直接显示找不到路径，直接运行电脑上内置的MINGW64,由于没什么影响，我就直接用了），以后统称gitt 直接在git官网上就可以进行下载。还有Node.js。这个东西看似没有什么用其实是hexo运行的关键。 之后直接注册git账号，并且建立一个库这个库的名称就是你 github.用户名.io并且还要记得勾选initialize this repository with a README所以一个账号只能支持一个blog的搭建。 之后下载hexo，不需要在什么商店商店上下载， 首先建立一个文件夹。注意要在一个大一点的盘上创立一个文件夹。命名为hexo 之后在git上进入这个地方，（cd /d/blog/hexo/）如果不知道怎么进入那就学习一下简单的cmd操作。在进入后在命令行中键入 npm install hexo-g这是一个npm命令，看不懂没关系，也不重要反正你知道时开始下载hexo就行了之后打开cmd（win+r ）直接就能打开 安装成功后]]></content>
  </entry>
  <entry>
    <title><![CDATA[云加密数据检索系统]]></title>
    <url>%2F2019%2F08%2F12%2F%E4%BA%91%E5%8A%A0%E5%AF%86%E6%95%B0%E6%8D%AE%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[这是我做的第一个项目，无论怎样我要好好写 报告书的写作报告书的准备报告书的标题就写成 云加密数据检索系统我要写的部分有 项目摘要（不超过200字） 立项依据（请对项目所涉及到的研究领域现状及问题进行简单介绍） 研究目标与内容（请对拟展开的研究内容及预期要达到的目标进行阐述） 有研究内容 达到的目标可以理解为通过什么技术，能做成什么 1、项目主要研究内容和意义（限300字）在支持隐私保护的几何范围查询问题上，针对密文的索引技术和查询算法是实现用户隐私泄露最小化和检索效率最优达到平衡的关键。针对基于位置服务中面临的大量多维度时空数据，传统的密文存储方式和查询算法不能满足用户快速、准确查询的需求。本方案基于已有的加密算法的安全性理论，结合基于位置服务的多样化实际应用需求，对索引生成算法和查询算法进行深入研究，提高方案的可用性和安全性。2、预期研究目标（限300字） 针对时空数据上几何范围检索上的安全性、可用性需求，提出安全高效的索引生成算法，并设计支持任意几何范围查询的陷门构建方法，形成具有隐私保护的高效、准确几何范围查询方案，解决几何范围查询模式单一、加密方案安全性难以满足用户要求等难题六、项目可行性研究报告提纲（一）立项依据与研究内容1、项目的立项依据：研究意义。随着对基于位置服务（LBS）的需求增加，在基于位置服务的场景下对空间数据进行几何范围搜索也亟需得到进一步探索和利用。一些典型的对于空间数据进行几何范围搜索的场合包括对传感器网络的查询、可计算的地理位置查询等。这类查询都可以将查询内容转换为对应的几何图形，比如长方形、三角形等，最后将落入几何图形中的坐标点信息返回给查询用户。现今最常用的电子地图就利用了这一技术：当用户查询周边指定范围内的特定类目标时，位置服务提供商将用户查询转换为对于地理信息点的圆形区域查询，最后将落入此区域的坐标点的信息返回给用户。在大数据时代背景下，各种移动设备、社交网络以及网页浏览产生的数据量急剧增长，位置服务提供商为了寻求高效准确的解决方案常常选择将大规模的数据外包至公共云服务提供商（例如：谷歌Cloud，亚马逊EC2）。然而，这一选择带来了不可忽视的安全问题。在数据存储和计算外包的情况下，第三方云服务提供商可以接触到所有数据，其中也包含数据拥有者的隐私数据。例如，当数据使用者试图搜索自己所在位置周边的目标点时，其实时位置信息会被云服务提供商获取。由此，防止隐私泄露且支持几何图形查询的方案不仅是亟需得到解决的问题，更是研究热点。针对时空数据的几何范围查询。现有的几何范围查询方案大多无法在实现隐私保护的同时支持高效查询，容易造成用户的隐私数据泄露或查询精度低下。此外，多数方案只支持将查询转化为固定种类图形，无法满足复杂化、个性化的检索需求。 2、项目的研究内容、研究目标以及拟解决的关键科学问题。 2.1研究内容在支持隐私保护的几何范围查询问题上，针对密文的索引技术和查询算法是实现用户隐私泄露最小化和检索效率最优达到平衡的关键。针对基于位置服务中面临的大量多维度时空数据，传统的密文索引生成方式和查询算法不能满足用户快速、准确查询的需求。本方案依据多域安全乘法协议（MSM）[ Liu X, Qin B, Deng R H, et al. A privacy-preserving outsourced functional computation framework across large-scale multiple encrypted domains[J]. IEEE Transactions on Computers, 2016, 65(12): 3567-3579.]、可分布式解密公钥密码系统（PCDD）[ Bresson E, Catalano D, Pointcheval D. A simple public-key cryptosystem with a double trapdoor decryption mechanism and its applications[C]//International Conference on the Theory and Application of Cryptology and Information Security. Springer, Berlin, Heidelberg, 2003: 37-54.]、多项式拟合等技术，基于已有的加密算法的安全性理论，并结合基于位置服务的多样化实际应用需求，从对索引生成算法和查询算法进行深入研究，从而保证时空数据查询的可用性和安全性，并且保证用户查询隐私安全。（一）支持隐私保护的高效几何范围查询方案在对时空数据进行几何范围查询时，在对搜索精度要求尽量接近明文搜索结果、搜索效率要求尽量达到次线性的同时要求隐私泄露控制在泄露函数（Leakage Function）定义以内。而传统常用方案中，早期只支持对特定几何图形的查询[ Wang B, Li M, Wang H, et al. Circular range search on encrypted spatial data[C]//2015 IEEE Conference on Communications and Network Security (CNS). IEEE, 2015: 182-190.]，尽管随后出现了利用布隆过滤器实现多种几何图形查询的方案，但占用存储空间较大且查询效率低。大多现有方案只采用可比较加密（OPE）[ Kerschbaum F. Frequency-hiding order-preserving encryption[C]//Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security. ACM, 2015: 656-667.]等安全性较弱算法，无法达到更高隐私保护要求。因此，本方案针对时空数据检索，首先研究基于多项式拟合的陷门生成方法，满足任意几何范围的查询的需求；进而利用索引生成算法对明文数据进行处理，构建高效的加密时空数据索引结构；最后利用多域安全乘法协议（MSM）及可分布式解密公钥密码系统（PCDD）对相似度进行计算，保证数据拥有方和使用方的隐私安全。2.2研究目标针对时空数据上几何范围检索上的安全性、可用性需求，提出安全高效的索引生成算法，并设计支持任意几何范围查询的陷门构建方法，形成具有隐私保护的高效、准确几何范围查询方案，解决几何范围查询模式单一、加密算法安全性难以满足用户要求等难题。 2.3拟解决的关键科学问题（I）高效索引生成算法时空数据查询时位置数据的多维形式和隐私性给加密数据的外包计算带来巨大挑战。对于数据拥有者来说，安全高效的索引结构不仅有利于保护原始数据的安全性，合适的索引结构可以减少用户更新数据后修改索引的时间花销。对于查询数据用户来说，利于即时、准确地获取查询结果，并且可以提供“剪枝”帮助，减少对无用节点的访问，从而提高检索效率。支持加密时空数据的索引结构需要根据密文查询方案进行设计，使得在密文上可以进行相关度计算、搜索结果排序的同时不泄露相关度排序、访问模式等隐私信息。只采用布隆过滤器等传统索引生成方法无法保证快速获取查询结果，而时空数据特有的形式需要专门数据结构进行处理。因此，在用户隐私保护的基础上设计安全高效的时空数据索引结构是一个亟待解决的问题。（II）安全高效查询方案在实际应用场景下，针对时空数据的几何范围查询具有多样性，只支持单一几何范围查询（例如只支持矩形区域）无法达到高可用性的要求。此外，随着用户对隐私保护的重视逐渐增加，保序加密等安全性较弱方案无法做到对用户查询结果以及访问模式的保护[ Xu G, Li H, Dai Y, et al. Enabling efficient and geometric range query with access control over encrypted spatial data[J]. IEEE Transactions on Information Forensics and Security, 2018, 14(4): 870-885.]。因此，利用合适的加密算法构造安全高效且支持任意几何形状的时空数据查询方案尤为重要。 3、拟采取的研究方案及可行性分析。（一）支持隐私保护的高效几何范围查询方案本方案针对时空数据上的几何范围查询问题进行研究，主要研究支持隐私保护和高效搜索的索引构建算法及查询方案。针对文本搜索等领域的索引结构无法直接用到时空数据查询上的问题，本项目对传统搜索领域常用的索引生成算法及查询方案进行了改进，提出了高效安全的时空数据索引构建算法和查询方案。本方案系统模型中包括数据拥有者、数据使用者（查询用户），以及两个云服务提供商：S1、S2（假设不相互勾结）。所提方案研究思路如图X所示。在预处理阶段，先将时空数据按照距离关系构建R树，其中每个叶子节点都代表一个具体位置点，每个非叶子节点代表一个矩形区域。之后将所有时空数据加密后上传到云S1。对于索引的构建，方案首先将位置点坐标扩展为，然后利用可分布式解密公钥密码系统（PCDD）来生成加密索引，记为。为了提高搜索效率，同时也利用保序加密（OPE）对非叶子节点进行加密（记为），以便在查询阶段进行“剪枝”操作。针对实际应用场景下用户搜索范围多样导致搜索区间非标准几何图形的问题，本方案拟利用多项式拟合技术对范围进行“描述”。在用户对数据进行查询时，首先利用多项式拟合对搜索区域进行拟合，将多项式系数进行提取后利用PCDD进行加密，作为陷门的一部分。同样，为了使“剪枝”步骤可行，将此搜索区域的最小邻接矩形（minimum bounding rectangle, MBR）的左下角点和右上角点坐标进行保序加密，并由此生成完整的陷门。为了返回落入用户查询范围的位置点信息，本方案设计云S1在接收到用户查询陷门后运行查询方案，利用多域安全乘法协议（MSM）及可分布式解密公钥密码系统（PCDD）的性质对密文索引与陷门进行向量內积运算。期间，为了提高用户查询效率，云S1将对加密后的R树进行“剪枝”操作，以减少对无用节点的访问。同时，为了保障用户的隐私，云S1与云S2将进行交互，使得两方都无法从陷门函数、索引以及搜索结果中获取用户隐私信息。 4、本项目的特色与创新之处。本方案特色之处在于从构造具有隐私保护且支持任意几何范围的高效时空数据查询需求出发，将多项式拟合技术、多域安全乘法协议（MSM）、可分布式解密公钥密码系统（PCDD）等密码学进展与已有数据结构相结合，不仅实现了原有方案未能达到的隐私保护级别，还实现了对任意几何范围查询的支持。本项目的创新之处主要在于：针对具有隐私保护需求的任意几何范围时空数据查询，本方案提出了利用R树、可分布式解密公钥密码系统（PCDD）以及多域安全乘法协议（MSM）构建支持高效搜索的加密索引方案，将数据拥有者面临的隐私泄露问题降到最低。针对传统时空数据搜索方案支持单一图形、规则图形的缺陷，本方案利用多项式拟合技术对不规则查询范围进行拟合，巧妙设计索引内容，利用向量內积计算方法判断是否满足查询需求。 让我来说一下我这几次被打回来的事情吧， 第一次，在林思琪家没怎么看要求就瞎写，老师说写的啥都不是，‘第二次，在咖啡馆认真写，但根本看不懂文献，不知道怎么操作，老师生气了第三次，字体和格式不对第四次，没有注意到序号根本粘贴不上。]]></content>
  </entry>
  <entry>
    <title><![CDATA[渲染的书写方式]]></title>
    <url>%2F2019%2F08%2F11%2F%E6%B8%B2%E6%9F%93%2F</url>
    <content type="text"><![CDATA[在这里就把markdown写作格式写下来 #这个是一个大标题 ##这是一个小标题 ###这是小小标题正文这里是斜体 这里是粗体 #粗写的大标题粗写的大标题显然失败了 1printf &quot;Hello world&quot;; 这是代码的书写方式，注意要用tab键实现缩进代码 这两种方式都可以做出分割线 我是第一行 我是第二行用-或*就可以写出无顺序的分点要注意-和星后要有一个空格 有序的分点 第一点 第二点 第三点 据说这是引用格式，不过应该可以用在别的地方 注意中间要有一个空格 插入图片 有趣的灵魂万里挑一 朋友的bloglin \这个是转义字符如*这就不是斜体了* 快捷键 （看到这个才知道好像之前的都白看了） ctrl题 ctrl+2 二级标题 ctrl+u 无序列表+1 一级标ctrl+g 插入图片 ctrl+l 插入超链接 Ctrl+B 粗体 Ctrl+I 斜体 Ctrl+Q 引用 Ctrl+K 代码块 大标题算了以后还是用快捷键吧]]></content>
  </entry>
  <entry>
    <title><![CDATA[新开始]]></title>
    <url>%2F2019%2F08%2F10%2F%E6%96%B0%E5%BC%80%E5%A7%8B%2F</url>
    <content type="text"><![CDATA[我愿乘风破浪 我打算开始对我的生活负起责任来,一个人总应该对自己的生活有着绝对的控制力。我不喜欢别人去窥探我的生活。因此我不会把这个blog告诉很多人，这是我的技术blog。我也会在将来把我的一些感想写到上面，写点东西总是好的，我在此承诺“我不会卖弄任何写到这里的东西。”因为卖弄本身就是一种浪费经历的方式。我在此承诺“我在这里写的东西，不为给任何人看而写。最后展望一下未来，我希望以我毕生的时间逐渐掌控自我，达到真正的自由。lll第一个认真和我说的导师告诉我优秀的这方面人就是要坚持，勤奋，不放l弃，不畏难。lllllllllllllllllllllllllllllllllllllllllllllllll 1现在是八月十四日，好像学了点什么其实又没干什么，在家里呆着衣食无忧还有朋友陪着。真是好舒服啊，不用面对不必要的关系，好像挺积极向上，但有些东西必须是应该自己去探寻。比如在离开朋友之后如何保持高校学习，如何避免堕落。人思想的转变在于交流，不同堕落的人交谈就可以不受他们的影响，不要忘了掌控自己。 2现在是八月十五日我决定进行重游泰康计划 标志地点 天湖渔场 十一楼 到四公里路上的心性树 小南屯的厂房 邪气的高层顶点 南湖 德力法尔工业园区 西湖小广场 航拍地点 在西湖小广场上转圈，晒太阳，拍曼妥思可乐 。德力法尔 拍日落 十一楼作为开始先去天湖渔场再去西湖，之后去看树，最后一次高层 南湖 小南屯打卡。最后去德力法尔拍日落。 虽然大多数没有打卡到，但是留下了很多回忆。详见火箭狂雷 3不要试图给别人看什么 4八月十六日 分析一下选课 第一轮为正式选 八月二十日九点开始 第一志愿推荐班级一定会入选，剩余抽签来选。 5现在是八月二十五日 想一下去年为什么在图书馆效率那么低，你想一下继续效率低迷还能持续像现在这样大量的工作吗，问你明天就开学了，一天自习七小时难道还要溜号六小时？累了就歇一会，不要看手机。 今天晚上我要学习 6九月四日虽然不知道为什么保存的文字会消失，但现在我的确是很焦躁的，就像往日的生活一样 。果然课程开始起来后生活就开始变成之前的样子。上课 的时候听不进去课，下课后只知道玩游戏，甚至现在还想着打游戏，到图书馆打游戏，好像什么都和上学期不一样了，但是至少还有一点和平时不一样，那就是之前有话还不知道往哪里说，现在最起码还有一个说话的地方，没事还可以往上面写点什么，不想说点什么吗？两点来的这里，现在五点了。终究还是没有克制住自己，现在七点半，两个小时回寝室。想一想现在要干的事情， 物理实验报告英语作业物理作业剩下就是不会的离散数学数字电路概率论]]></content>
  </entry>
</search>
