<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[云加密数据检索系统]]></title>
    <url>%2F2019%2F08%2F12%2F%E4%BA%91%E5%8A%A0%E5%AF%86%E6%95%B0%E6%8D%AE%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[这是我做的第一个项目，无论怎样我要好好写 报告书的写作报告书的准备报告书的标题就写成 云加密数据检索系统我要写的部分有 项目摘要（不超过200字） 立项依据（请对项目所涉及到的研究领域现状及问题进行简单介绍） 研究目标与内容（请对拟展开的研究内容及预期要达到的目标进行阐述） 四、项目特色与创新 这是我要写的，为了将来答辩所需我决定将全部资料都粘贴到这里 云存储在加密数据检索方面的现状及问题作者：sw06594 2017-12-25 来源：网络本文分析了加密检索技术在云存储应用中的重要意义，综合分析了当前加密检索和相关技术研究现状和存在问题。 云计算是一种通过网络以按需、易扩展的方式获取所需服务的在线网络服务交付和使用模式，它是分布式计算的一种形式。是网络上的服务以及提供这种服务的数据中心的软硬件集合。云计算是并行计算、分布式计算和网格计算的演进。云计算的实现形式包括软件即服务、效用计算、平台即服务、基础设施即服务。目前云计算已经有部分应用，如Google公司的GoogleDocs，另外微软、Amazon也有类似的云计算服务设施。 云计算主要目标是提供高效的计算服务。** 云计算基础设施之一是提供可靠、安全的数据存储中心。因此，存储安全是云计算领域的安全话题之一。为解决数据隐私的保护问题，常见的方法是由用户对数据进行加密，把加密后的密文信息存储在服务端。当存储在云端的加密数据形成规模之后，对加密数据的检索成为一种迫切需要解决的问题。** 在加密信息检索的相关研究工作中，对加密信息的检索有单用户线性搜索、基于关键词的公钥搜索、安全索引等几种算法。这几种算法可以快速地检索出所需信息，但其代价较高，不适用大规模数据检索的情况，而且，在云存储中，检索时相关的文档较多，对其进行相关排序是进一步需要解决的问题，以上几种算法均不能解决问题。 通过保序加密可以利用文档中的词频信息对文档依相关度进行排序，提高了检索准确率和返回率。然而在文档中某些关键词出现的频率非常高，指代性不强，这一类词称为常用词，常用词的存在歪曲了文档和实际查询相关度。而准确反映文档、查询相关度的向量空间模型无法直接应用。全同态加密提供可以对密文进行操作的加密算法。而且通过全同态加密，一方面可以保证密文信息不被统计分析，另一方面可以对加密信息进行加法和乘法运算，同时保持其对应明文的顺序。 1.云存储应用中的加密存储技术 大规模高性能存储系统安全需求，特别是云存储应用中，可扩展和高性能的存储安全技术，是推动网络环境下的存储应用(如云存储应用)最根本的保证，已经成为当前网络存储领域的研究热点。云存储应用中的存储安全包括认证服务、数据加密存储、安全管理、安全日志和审计。 访问控制服务实现用户身份认证、授权，防止非法访问和越权访问。主要功能包括：用户只能对经管理员或文件所有者授权的许可文件进行被许可的操作；管理员只能进行必要的管理操作，如用户管理、数据备份、热点对象迁移，而不能访问用户加密了的私有数据。 加密存储是对指定的目录和文件进行加密后保存，实现敏感数据存储和传送过程中的机密性保护。安全管理主要功能是用户信息和权限的维护，如用户帐户注册和注销等，授权用户、紧急情况下对用户权限回收等。 安全日志和审计是记录用户和系统与安全相关的主要活动事件，为系统管理员监控系统和活动用户提供必要的审计信息。 对用户来说，在上述4类存储安全服务中，存储加密服务尤为重要。加密存储是保证用户私有数据在共享存储平台的机密性核心技术。 随着存储系统和存储设备越来越网络化，存储系统在保证敏感数据机密性的同时，必须提供相应的加密数据共享技术。保护用户隐私性要求存储安全建立在对存储系统的信任基础之上。必须研究适用于网络存储系统的加密存储技术，提供端到端加密存储技术及密钥长期存储和共享机制，以确保用户数据的机密性和隐私性，提高密钥存储的安全性、分发的高效性及加密策略的灵活性。在海量的加密信息存储中，加密检索是实现信息共享的主要手段，是加密存储中必须解决的问题之一。 2.加密信息检索技术 对加密信息检索的研究始于2000年，Song等人提出加密数据搜索的实用算法，Boneh等人提出基于关键词的公钥加密算法，Park等人提出安全索引搜索算法。 2.1线性搜索算法 在线性搜索算法中，首先用对称加密算法对明文信息加密。对于每个关键词对应的密文信息，生成一串长度小于密文信息长度的伪随机序列，并生成一由伪随机序列及密文信息确定的校验序列。伪随机序列的长度与检验序列长度之和等于密文信息的长度。伪随机序列及检验序列对密文信息再次加密。在搜索过程中，用户提交明文信息对应的密文信息序列。在服务器端，密文信息序列被线性地同每一段序列模2加。如果得到的结果满足校验关系，那么说明密文信息序列出现，否则，说明密文信息不存在。 线性搜索方法是一种一次一密的加密信息检索算法，因此有极强的抵抗统计分析的能力。但其有一个致命的缺点，即逐次匹配密文信息，这使得这种检索方法在大数据集的情况下难以应用。 2.2基于关键词的公钥搜索 基于关键词的公钥加密搜索算法由Boneh等人提出，其目的是可以在用户端存储、计算资源不足的情况下，通过访问远端数据库获取数据信息。存储、计算资源分布具有不对称性，即用户的计算存储能力不能实时满足其需求。另一方面用户在移动情况下存储、索引数据的需求也有增加，比如Email服务等。在这种特定情况下，需要保护用户的数据隐私。加密数据有多个不同来源，针对这一问题的解决方法是加密算法使用公钥加密。 算法的过程如下，首先生成公钥、私钥，然后对待存储的明文关键词用公钥进行加密，生成可搜索的密文信息。 2.3安全索引 安全索引由Park等人提出，解决了简单索引方式易受统计攻击的问题。其机制是每次加密所用的密钥是事先生成的一组逆Hash序列，加密后的索引被放入布隆过滤器中。当检索的时候，首先用逆Hash序列密钥生成多个陷门，然后进行布隆检测。对返回的密文文档解密即可得到所需检索的文档。 针对有新用户加入、旧用户退出的多用户加密信息检索，这是一种解决方法。但其存在的缺陷是需要生成大量的密钥序列，随着检索次数的增加，每多进行一次检索，其计算复杂度均线性增加。这在实际应用中很难被接受。 在以上提到的多种加密信息检索算法中，所用的检索模型都是布尔模型，因而无法根据查询与待检索文档的相关度进行排序操作。在实际情况中，尤其是在数据规模较大的云存储应用中，包含某一查询关键词的文档可能有很多个，如何在多个可能相关的文档中找出最相关的一个或若干个文档是需要解决的问题。对加密的文档，是否可以应用成熟的向量空间模型，进而进行相关排序，是一个开放的问题。 2.4引入相关排序的加密搜索算法 Swaminathan等人提出了保护隐私的排序搜索算法[8]。在这一算法中，每一文档中关键词的词频都被保序加密算法加密。加密文档被提交查询给服务器端后，首先计算检索出含有关键词密文的加密文档；然后对用保序算法加密的词频对应的密文信息进行排序处理；最后把评价值高的加密文档返回给用户，由用户对其进行解密。 这一种方法可以在给定多个可能相关文档的情况下对加密文档进行排序，进而把最可能相关的文档返回给用户。但这一种算法首先不适用于一个查询包含多个查询词的情况，其次算法只利用了文档中的词频信息，无法利用词的逆文档频率，进而向量空间模型无法直接应用。解决前一种问题的一种方法是用加法同态加密算法[9]对词频信息进行加密处理。 3.一种基于全同态加密的检索方法 在加密信息检索研究中，结果的排序是衡量检索算法性能的重要指标之一。当前随着云计算技术的提倡和应用，加密文档必将呈爆炸式增加。排序的准确性成为对检索系统性能的客观要求，其主要目的是提高检索系统服务质量和检索效率。分析现有的加密信息检索算法发现，在保证查准和查全两方面性能的同时，对排序问题以及准确性方面考虑不够。针对该问题，本文提出了一种面向云存储应用中的全同态加密的检索方法。全同态加密的检索方法是采用信息检索中的向量空间模型，计算检索出的文档与待查询信息之间的相关度，对检索词词频和倒排文档频率进行统计，然后采用全同态方法对文档进行加密并建立索引方法。检索后将加密文档与索引项密文一起上传到服务器端。 全同态加密检索及排序过程如图1所示。提交检索之前，同样先对检索语句进行分词、词干化，得到关键词明文序列并对明文进行加密。云端服务器对提交密文序列进行检索时，提交加密后的检索词。 文档由每个关键词的权重向量表示，权重是词频与倒排文档频率对数的乘积的归一化。对用全同态加密后的词频、倒排文档频率进行操作可以得到权重。 对于检索词采用同样方法来描述，取两者的内积即可得到两者的相关度，然后根据大小进行排序，将有效排序后的文档返回给用户。用户得到加密文档后，用私钥对文档解密得到原始文档。 通过全同态加密算法加密的明文数据可以在不恢复明文信息的情况被有效检索出来，即把最相关的文档返回给用户。既保护了用户的数据安全，又提高了检索的性能。 4.结束语 本文分析了加密检索技术在云存储应用中的重要意义，综合分析了当前加密检索和相关技术研究现状和存在问题。在此基础上，本文提出了全同态加密检索方法并简要介绍全同态加密检索方法的基本原理。已有的实验数据表明，全同态加密检索方法与其他加密检索算法相比，能在一定程度上提高检索效率。 我要写三个部分 可验证的多关键字排序 第一篇是多关键字排序，第二篇是基于莫克哈希树的数据完整性检验 图像数据检索 时空间数据几何范围查询]]></content>
  </entry>
  <entry>
    <title><![CDATA[数据结构]]></title>
    <url>%2F2019%2F08%2F12%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F</url>
    <content type="text"><![CDATA[出于效率低下以及不认真的态度的问题，我大一下学期的数据结构与算法分析挂掉了。但我并不想只是应付补考。于是我打算用八个上午学习这个东西。我先说个规矩写的要求就是假如有一个人后来看到，他能获得知识 第一个上午数据结构的概念数据结构 数据结构是一门研究非数值计算的程序设计问题中的操作的对象，以及他们之间的关系和操作等相关问题的学科。数据结构是一种或多种特定关系的数据元素的集合。 数据 数据是描述客观事物的符号，是计算机中可操作的对象，是能被计算机识别，并识别给计算机处理的符号集合 数据元素 是组成数据有一定意义的基本单位，也称为记录例如人就是数据元素，而数据项就是眼睛耳朵 数据项 一个数据元素可由不同的数据项组成，数据项是数据不可分割的最小单位 但是在建立模型中还是把数据元素作为着眼点。 逻辑结构 平等的 集合结构 一对一 线性结构 一对多 树形结构 多对多 图形结构 储存结构 顺序储存结构 连续的储存单元 链式储存结构 元素放在任意的储存单元中，用一个指针存放数据元素的地址 总结：逻辑结构是面向问题的，而储存结构是面向计算机的。 抽象数据类型 这是指一个数学模型和定义在上面的一组操作体现了程序设计中问题分解，抽象和信息隐藏的特性。 这个现在不能理解，以后再回来写这个。 算法算法的特性 输入，输出，算法必须有零个或多个输入并且有一个或者多个输出。 有穷性 算法不能无限循环 确定性 算法每一个步骤都不会产生歧义 可行性 每一步但是能够通过有限次数实现的 算法设计的要求，以及我之后代码的写作自我要求正确性，对于特殊数据也有正确回应方便阅读，在看不懂的地方有注释效率高储存量低 算法的计算量for（i=1;i&lt;n;i++） { for(j=0;j&lt;=n;j++) { x++; sum=sum++; } } ptintf(&quot;%d,sum&quot;);这个程序执行了n*n次。 线性阶类似于上面的代码，直接看最高次项和他的系数如5n^2的复杂度就是o（n^2） 对数阶 类似于下面2^x=n。x=log2n,所以这个循环的复杂度就是o（logn） int count=1; while(count&lt;n) { count=count*2; } 常用时间复杂度从小到大依次是o(1)&lt;o(logn)&lt;o(n)&lt;o(nlogn)&lt;o(n^2)&lt;o(n^3)&lt;o(2^n)&lt;o(n!)&lt;o(n^n)当然算法还有最坏情况和平均复杂度。还有算法的空间复杂度，不重要在这里就不说了。 第二个上午线性表这个东西不知道浪费了我多少时间 关于定义零个或者多个数据元素的有限序列 ai有一个直接前驱和一个直接后继元素 线性表的顺序储存结构：用一段连续储存单元依次存储线性表的数据元素 线性表的抽象数据类型看不懂的东西又来啦 可以理解为数据结构中必须要进行把变量进行抽象数据类型。 List 线性表 顺序储存 #define MAXSIZE 20 /储存空间出事分配量/ typedef int Elemtype; typedef struct { Elemtype data[MAXSIZE]://数据储存数据元素的最大值 int length;//线性表的最大长度 }Sqlist; 以后还会有很多类似代码 typedef可以理解为规定一种形式类似于Elemtype被规定为int 而这个结构体被规定为Sqlist而在之中 data就是地址 顺序储存结构需要三个属性 储存空间的起始位置：我们可以理解为储存位置就是包含起始位置 线性表的最大存储容量 线性表的当前长度 位置考试可能会考 直接线性相加 线性储存结构的优缺点优点:无需为表明逻辑关系而添加额外的储存空间。可以快速存取任意位置的元素缺点：插入和删除需要移动大量元素。当线性表长度过大时无法确定长度。容易造成储存空间的碎片化。 status等同于typedef int status 取出（因为第一个元素位置是零所以要返回i-1） status GetList(Sqlist L,int i,Elentype *e) { if(L.length==0 || i&lt;1 || i&gt;L.length) return ERROR; *e=L.data[i-1]；//在这里说一下*e就直接可以返回地址上的数值 return OK； }插入 Status ListInsert(SqList *L，int i, Elemtype e) { int k; if(L-&gt;length==MAXSIZE) return ERROR； if(i&lt;1 || i&gt;L-&gt;length+1) return ERROR; if (i&lt;L-&gt;length) { for(k=L-&gt;length-1,k&gt;i-1,k--) L-&gt;data[k+1]=L-&gt;data[k]; } L-&gt;data[i-1]=e;//注意这里L-&gt;就是指向这个地址的数值 L-&gt;length++; return OK; }删除相似就不写了 线性表链式储存结构]]></content>
  </entry>
  <entry>
    <title><![CDATA[渲染的书写方式]]></title>
    <url>%2F2019%2F08%2F11%2F%E6%B8%B2%E6%9F%93%2F</url>
    <content type="text"><![CDATA[在这里就把markdown写作格式写下来 #这个是一个大标题 ##这是一个小标题 ###这是小小标题正文这里是斜体 这里是粗体 #粗写的大标题粗写的大标题显然失败了 1printf &quot;Hello world&quot;; 这是代码的书写方式，注意要用tab键实现缩进代码 这两种方式都可以做出分割线 我是第一行 我是第二行用-或*就可以写出无顺序的分点要注意-和星后要有一个空格 有序的分点 第一点 第二点 第三点 据说这是引用格式，不过应该可以用在别的地方 注意中间要有一个空格 插入图片 有趣的灵魂万里挑一 朋友的bloglin \这个是转义字符如*这就不是斜体了* 快捷键 （看到这个才知道好像之前的都白看了） ctrl题 ctrl+2 二级标题 ctrl+u 无序列表+1 一级标ctrl+g 插入图片 ctrl+l 插入超链接 Ctrl+B 粗体 Ctrl+I 斜体 Ctrl+Q 引用 Ctrl+K 代码块 大标题算了以后还是用快捷键吧]]></content>
  </entry>
  <entry>
    <title><![CDATA[新开始]]></title>
    <url>%2F2019%2F08%2F10%2F%E6%96%B0%E5%BC%80%E5%A7%8B%2F</url>
    <content type="text"><![CDATA[我愿乘风破浪 我打算开始对我的生活负起责任来,一个人总应该对自己的生活有着绝对的控制力。我不喜欢别人去窥探我的生活。因此我不会把这个blog告诉很多人，这是我的技术blog。我也会在将来把我的一些感想写到上面，写点东西总是好的，我在此承诺“我不会卖弄任何写到这里的东西。”因为卖弄本身就是一种浪费经历的方式。我在此承诺“我在这里写的东西，不为给任何人看而写。最后展望一下未来，我希望以我毕生的时间逐渐掌控自我，已达到真正的自由。]]></content>
  </entry>
</search>
